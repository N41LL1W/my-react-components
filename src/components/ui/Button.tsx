// ‚úÖ Importa o React (necess√°rio para JSX funcionar)
import React from "react";

// ‚úÖ Importa os tipos do HTML padr√£o (neste caso, de <button>)
// Isso garante que o nosso componente reconhe√ßa todas as propriedades nativas, como onClick, disabled, etc.
import type { ButtonHTMLAttributes } from "react";

// ‚úÖ Importa a biblioteca "clsx", usada para juntar classes condicionalmente
// Exemplo: clsx("btn", isActive && "btn-active") ‚Üí "btn btn-active"
import clsx from "clsx";

// ------------------------------------------------------------
// üîπ DEFINI√á√ÉO DE TIPOS PERSONALIZADOS
// ------------------------------------------------------------

// Tipos de varia√ß√µes visuais que o bot√£o pode ter
// Isso limita as op√ß√µes, ajudando o TypeScript a sugerir valores v√°lidos
type ButtonVariant = "primary" | "success" | "danger" | "default";

// Tamanhos poss√≠veis do bot√£o (definidos via Tailwind)
type ButtonSize = "sm" | "md" | "lg";

// ------------------------------------------------------------
// üîπ INTERFACE DE PROPRIEDADES (Props)
// ------------------------------------------------------------

// Extende as propriedades nativas de um <button> HTML padr√£o
// Assim, podemos usar atributos como onClick, disabled, type="submit", etc.
interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: ButtonVariant; // Define a varia√ß√£o de cor/estilo
  size?: ButtonSize;       // Define o tamanho
  fullWidth?: boolean;     // Se verdadeiro, o bot√£o ocupa 100% da largura
}

// ------------------------------------------------------------
// üîπ COMPONENTE BUTTON
// ------------------------------------------------------------

// React.FC<ButtonProps> indica que este √© um Functional Component
// que aceita as props definidas acima
export const Button: React.FC<ButtonProps> = ({

  // Desestrutura√ß√£o das props (com valores padr√£o)
  children,           // Conte√∫do interno do bot√£o (texto ou √≠cones)
  variant = "default",// Se nenhuma varia√ß√£o for passada, usa "default"
  size = "md",        // Tamanho padr√£o m√©dio
  fullWidth = false,  // Por padr√£o, o bot√£o n√£o ocupa toda a largura
  className,          // Classes extras opcionais que o usu√°rio pode passar
  ...props            // O resto das props √© repassado diretamente ao <button>
}) => {

  // ------------------------------------------------------------
  // üî∏ ESTILOS BASE
  // ------------------------------------------------------------
  // Classes do Tailwind que todos os bot√µes ter√£o
  const baseStyles =
    "rounded-md font-semibold focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors";

  // ------------------------------------------------------------
  // üî∏ ESTILOS POR TAMANHO
  // ------------------------------------------------------------
  // Aqui definimos o padding e o tamanho da fonte para cada op√ß√£o
  const sizeStyles = {
    sm: "px-2 py-1 text-sm",
    md: "px-4 py-2 text-base",
    lg: "px-6 py-3 text-lg",
  };

  // ------------------------------------------------------------
  // üî∏ ESTILOS POR VARIA√á√ÉO
  // ------------------------------------------------------------
  // Cada varia√ß√£o usa cores diferentes (modo claro/escuro incluso)
  const variantStyles = {
    default:
      "bg-gray-200 text-gray-900 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-100 dark:hover:bg-gray-600",

    primary:
      "bg-blue-600 text-white hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600",

    success:
      "bg-green-600 text-white hover:bg-green-700 dark:bg-green-500 dark:hover:bg-green-600",

    danger:
      "bg-red-600 text-white hover:bg-red-700 dark:bg-red-500 dark:hover:bg-red-600",
  };

  // ------------------------------------------------------------
  // üîπ RETORNO (Renderiza√ß√£o JSX)
  // ------------------------------------------------------------
  return (
    <button
      // clsx combina todas as classes dinamicamente
      className={clsx(
        baseStyles,          // estilos base comuns
        sizeStyles[size],    // tamanho definido pela prop "size"
        variantStyles[variant], // cor/estilo definido pela prop "variant"
        fullWidth && "w-full",  // aplica largura total se fullWidth=true
        className             // adiciona classes extras passadas manualmente
      )}

      // ...props espalha todas as propriedades adicionais (onClick, type, etc.)
      {...props}
    >
      {/* O conte√∫do interno do bot√£o (texto, √≠cone, etc.) */}
      {children}
    </button>
  );
};
