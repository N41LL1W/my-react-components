// Importa o React e o hook useState
import { useState } from "react";

// Importa os componentes usados na p√°gina
import Navbar from "../components/layout/Navbar";
import Card from "../components/ui/Card";
import { Button } from "../components/ui/Button";
import Modal from "../components/ui/Modal";
import Alert from "../components/ui/Alert"; // ‚úÖ Importa o componente de Alert

// ------------------------------------------------------------
// üîπ Componente principal da p√°gina inicial
// ------------------------------------------------------------
export default function HomePage() {
  // Estado que controla o Modal
  const [isModalOpen, setModalOpen] = useState(false);

  // Estado que controla o alerta atual
  const [alertType, setAlertType] = useState<string | null>(null);

  return (
    // üîπ Container principal com fundo adapt√°vel ao tema
    <div className="min-h-screen bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 transition-colors duration-300">
      {/* Navbar no topo */}
      <Navbar />

      {/* Corpo principal da p√°gina */}
      <main className="pt-20 flex flex-col items-center justify-center p-8">
        {/* T√≠tulo principal */}
        <h1 className="text-4xl font-bold mb-6">Bem-vindo üëã</h1>

        {/* ------------------------------------------------------------
          üî∏ CARD PRINCIPAL
          - T√≠tulo: ‚ÄúMeu primeiro Card‚Äù
          - Conte√∫do: texto e bot√µes para abrir Modal e Alerts
        ------------------------------------------------------------- */}
        <Card
          title="Meu primeiro Card"
          footer={
            <div className="flex justify-end space-x-2">
              {/* Bot√£o que abre o modal */}
              <Button variant="primary" onClick={() => setModalOpen(true)}>
                Abrir Modal
              </Button>
            </div>
          }
        >
          {/* Conte√∫do dentro do card */}
          <p>Este √© o conte√∫do do card ‚Äî voc√™ pode personalizar livremente! üöÄ</p>

          {/* ------------------------------------------------------------
            üîπ SE√á√ÉO DOS BOT√ïES DE ALERTA
            - Cada bot√£o exibe um tipo diferente de alerta
          ------------------------------------------------------------- */}
          <div className="flex flex-wrap justify-center gap-3 pt-5">
            {/* üîµ Bot√£o para mostrar alerta de informa√ß√£o */}
            <Button variant="primary" onClick={() => setAlertType("info")}>
              Mostrar Info
            </Button>

            {/* üü¢ Bot√£o para mostrar alerta de sucesso */}
            <Button variant="success" onClick={() => setAlertType("success")}>
              Mostrar Sucesso
            </Button>

            {/* üü° Bot√£o para mostrar alerta de aviso */}
            <Button variant="default" onClick={() => setAlertType("warning")}>
              Mostrar Aviso
            </Button>

            {/* üî¥ Bot√£o para mostrar alerta de erro */}
            <Button variant="danger" onClick={() => setAlertType("error")}>
              Mostrar Erro
            </Button>
          </div>

          {/* ------------------------------------------------------------
            üî∏ ALERTAS CONDICIONAIS
            - S√£o exibidos apenas quando o tipo correspondente √© selecionado
          ------------------------------------------------------------- */}
          <div className="mt-6 space-y-2">
            {alertType === "info" && (
              <Alert type="info" onClose={() => setAlertType(null)}>
                Este √© um alerta informativo üí°
              </Alert>
            )}

            {alertType === "success" && (
              <Alert type="success" onClose={() => setAlertType(null)}>
                Opera√ß√£o conclu√≠da com sucesso! ‚úÖ
              </Alert>
            )}

            {alertType === "warning" && (
              <Alert type="warning" onClose={() => setAlertType(null)}>
                Aten√ß√£o! Verifique as informa√ß√µes. ‚ö†Ô∏è
              </Alert>
            )}

            {alertType === "error" && (
              <Alert type="error" onClose={() => setAlertType(null)}>
                Ocorreu um erro inesperado. ‚ùå
              </Alert>
            )}
          </div>
        </Card>

        {/* ------------------------------------------------------------
          üîπ MODAL
          - Abre quando o usu√°rio clica no bot√£o ‚ÄúAbrir Modal‚Äù
        ------------------------------------------------------------- */}
        <Modal
          isOpen={isModalOpen}
          onClose={() => setModalOpen(false)}
          title="Exemplo de Modal"
          size="md"
        >
          <p>Conte√∫do do modal. Voc√™ pode colocar qualquer coisa aqui! üí°</p>
          <div className="flex justify-end mt-6">
            <Button variant="success" onClick={() => setModalOpen(false)}>
              Fechar
            </Button>
          </div>
        </Modal>

        {/* ------------------------------------------------------------
          üîπ TEXTO FINAL
        ------------------------------------------------------------- */}
        <p className="text-lg mt-8 text-center max-w-lg">
          Projeto React + Vite + Tailwind v4 com suporte completo a tema claro,
          escuro e sistema.
        </p>
      </main>
    </div>
  );
}
